tosca_definitions_version: cloudify_dsl_1_3

imports:
  - {{cloudify.types_location}}
  - {{magic.repo_root}}/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3/plugin.yaml

inputs:
  prefix:
    description: >
      Unique test id to be added as a prefix for resource names.
  linux_template_name:
    description: >
      Template to clone linux VMs from
  network:
    description: >
      Which network to deploy the VM on
    default: VM Network
  is_network_distributed:
    description: >
      Whether the network is on a distributed switch
    default: true
  distvswitch:
    description: >
      The name of the dvSwitch to create the new network on.
  vlan:
    description: >
      The VLAN to use for the new network.
  vsphere_username:
    type: string
    description: >
      User login for vsphere
  vsphere_password:
    type: string
    default: ''
    description: >
      User password for vsphere
  vsphere_host:
    description: >
      vSphere host
    type: string
  vsphere_port:
    description: >
      vSphere API port
    default: 443
    type: string
  vsphere_datacenter_name:
    description: >
      datacenter name
    default: Datacenter
    type: string
  vsphere_resource_pool_name:
    description: >
      Resource pool to deploy Vms on
    default: Resources
    type: string
  certificate_path:
    description: >
      The path to the vCenter certificate.
    default: ''
  allow_insecure:
    description: >
      Whether to allow insecure connections.
    default: true
  username:
    description: >
      Username to use for SSH access to linux servers.
  key_path:
    description: >
      Path to SSH key for access to linux servers.

dsl_definitions:
  - &connection_configuration
    username: { get_input: vsphere_username }
    password: { get_input: vsphere_password }
    host: { get_input: vsphere_host }
    port: { get_input: vsphere_port }
    datacenter_name: { get_input: vsphere_datacenter_name }
    resource_pool_name: { get_input: vsphere_resource_pool_name }
    certificate_path: { get_input: certificate_path }
    allow_insecure: { get_input: allow_insecure }

node_templates:
  linuxserver1:
    type: cloudify.vsphere.nodes.Server
    properties:
      install_agent: false
      server:
        name: { concat: [{ get_input: prefix }, '-network-slashes-vm-1'] }
        template: { get_input: linux_template_name }
        cpus: 1
        memory: 2048
      networking:
        connect_networks:
          - name: { get_input: network }
            switch_distributed: { get_input: is_network_distributed }
            external: true
          - name: { concat: [{ get_input: prefix }, '-testslash/network'] }
            switch_distributed: true
          - name: { concat: [{ get_input: prefix }, '-testenc%2fnetwork'] }
            switch_distributed: true
      connection_config: *connection_configuration
    relationships:
      - target: net1
        type: cloudify.relationships.connected_to
      - target: net2
        type: cloudify.relationships.connected_to

  linuxserver1_test_net1:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/test_net.py
            task_name: configure
            task_properties:
                prefix: 172.17.45.
            fabric_env:
              user: { get_input: username }
              key_filename: { get_input: key_path }
              host_string: { get_attribute: [ linuxserver1, public_ip ] }
              test_network: { concat: [{ get_input: prefix }, '-testslash/network'] }
    relationships:
      - target: linuxserver1
        type: cloudify.relationships.depends_on

  linuxserver1_test_net2:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/test_net.py
            task_name: configure
            task_properties:
                prefix: 172.17.46.
            fabric_env:
              user: { get_input: username }
              key_filename: { get_input: key_path }
              host_string: { get_attribute: [ linuxserver1, public_ip ] }
              # Script does't handle multiple encoding approaches
              test_network: { concat: [{ get_input: prefix }, '-testenc/network'] }
    relationships:
      - target: linuxserver1
        type: cloudify.relationships.depends_on

  linuxserver2:
    type: cloudify.vsphere.nodes.Server
    properties:
      install_agent: false
      server:
        name: { concat: [{ get_input: prefix }, '-network-slashes-vm-2'] }
        template: { get_input: linux_template_name }
        cpus: 1
        memory: 2048
      networking:
        connect_networks:
          - name: { get_input: network }
            switch_distributed: { get_input: is_network_distributed }
            external: true
          - name: { concat: [{ get_input: prefix }, '-testslash%2fnetwork'] }
            switch_distributed: true
          - name: { concat: [{ get_input: prefix }, '-testenc/network'] }
            switch_distributed: true
      connection_config: *connection_configuration
    relationships:
      - target: net1
        type: cloudify.relationships.connected_to
      - target: net2
        type: cloudify.relationships.connected_to

  linuxserver2_test_net1:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/test_net.py
            task_name: configure
            task_properties:
                prefix: 172.17.45.
            fabric_env:
              user: { get_input: username }
              key_filename: { get_input: key_path }
              host_string: { get_attribute: [ linuxserver2, public_ip ] }
              # Script does't handle multiple encoding approaches
              test_network: { concat: [{ get_input: prefix }, '-testslash/network'] }
    relationships:
      - target: linuxserver2
        type: cloudify.relationships.depends_on

  linuxserver2_test_net2:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/test_net.py
            task_name: configure
            task_properties:
                prefix: 172.17.46.
            fabric_env:
              user: { get_input: username }
              key_filename: { get_input: key_path }
              host_string: { get_attribute: [ linuxserver2, public_ip ] }
              test_network: { concat: [{ get_input: prefix }, '-testenc/network'] }
    relationships:
      - target: linuxserver2
        type: cloudify.relationships.depends_on

  net1:
    type: cloudify.vsphere.nodes.Network
    properties:
      network:
        name: { concat: [{ get_input: prefix }, '-testslash/network'] }
        switch_distributed: true
        vlan_id: { get_input: vlan }
        vswitch_name: { get_input: distvswitch }
      connection_config: *connection_configuration

  net2:
    type: cloudify.vsphere.nodes.Network
    properties:
      network:
        name: { concat: [{ get_input: prefix }, '-testenc%2fnetwork'] }
        switch_distributed: true
        vlan_id: { get_input: vlan }
        vswitch_name: { get_input: distvswitch }
      connection_config: *connection_configuration

outputs:
  slashnet_success_1:
    value: { get_attribute: [ linuxserver1_test_net1, ping_success ] }
  slashnet_success_2:
    value: { get_attribute: [ linuxserver2_test_net1, ping_success ] }
  encnet_success_1:
    value: { get_attribute: [ linuxserver1_test_net2, ping_success ] }
  encnet_success_2:
    value: { get_attribute: [ linuxserver2_test_net2, ping_success ] }
